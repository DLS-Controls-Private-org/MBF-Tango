/*----- PROTECTED REGION ID(MBFCleaning.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        MBFCleaning.cpp
//
// description : C++ source for the MBFCleaning class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               MBFCleaning are implemented in this file.
//
// project :     MBFCleaning
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2018
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <MBFCleaning.h>
#include <MBFCleaningClass.h>
#include <SweepThread.h>
#include <ScraperDownThread.h>
#include <ScraperUpThread.h>
#include <DoAllThread.h>

/*----- PROTECTED REGION END -----*/	//	MBFCleaning.cpp

/**
 *  MBFCleaning class description:
 *    A class for the bunch by bunch cleaning in the SR
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name              |  Method name
//================================================================
//  State                     |  Inherited (no method)
//  Status                    |  Inherited (no method)
//  StartCleaning             |  start_cleaning
//  LoadConfigurationFile     |  load_configuration_file
//  SaveConfigurationFile     |  save_configuration_file
//  GetConfigurationFilePath  |  get_configuration_file_path
//  Sweep                     |  sweep
//  EndCleaning               |  end_cleaning
//  DoAll                     |  do_all
//  Stop                      |  stop
//  SelectScraper             |  select_scraper
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  FreqMin         |  Tango::DevDouble	Scalar
//  FreqMax         |  Tango::DevDouble	Scalar
//  SweepTime       |  Tango::DevDouble	Scalar
//  Gain            |  Tango::DevDouble	Scalar
//  ConfigFileName  |  Tango::DevString	Scalar
//  ExternalSweep   |  Tango::DevBoolean	Scalar
//  UsedScrapers    |  Tango::DevBoolean	Spectrum  ( max = 16)
//================================================================

namespace MBFCleaning_ns
{
/*----- PROTECTED REGION ID(MBFCleaning::namespace_starting) ENABLED START -----*/

//	static initializations

#define SF_DELETE(x) if(x) { delete x; x=NULL; }

/*----- PROTECTED REGION END -----*/	//	MBFCleaning::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::MBFCleaning()
 *	Description : Constructors for a Tango device
 *                implementing the classMBFCleaning
 */
//--------------------------------------------------------
MBFCleaning::MBFCleaning(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(MBFCleaning::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::constructor_1
}
//--------------------------------------------------------
MBFCleaning::MBFCleaning(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(MBFCleaning::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::constructor_2
}
//--------------------------------------------------------
MBFCleaning::MBFCleaning(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(MBFCleaning::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void MBFCleaning::delete_device()
{
	DEBUG_STREAM << "MBFCleaning::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	for(int i=0;i<nbScrapers;i++) {
	  delete scraperDs[i];
	}
	SF_DELETE(mbfDS);
	SF_DELETE(shakerDS);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::delete_device
	delete[] attr_FreqMin_read;
	delete[] attr_FreqMax_read;
	delete[] attr_SweepTime_read;
	delete[] attr_Gain_read;
	delete[] attr_ConfigFileName_read;
	delete[] attr_ExternalSweep_read;
	delete[] attr_UsedScrapers_read;
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void MBFCleaning::init_device()
{
	DEBUG_STREAM << "MBFCleaning::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	scraperDs.clear();
	mbfDS = nullptr;
	shakerDS = nullptr;
  scrAttNames.clear();

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_FreqMin_read = new Tango::DevDouble[1];
	attr_FreqMax_read = new Tango::DevDouble[1];
	attr_SweepTime_read = new Tango::DevDouble[1];
	attr_Gain_read = new Tango::DevDouble[1];
	attr_ConfigFileName_read = new Tango::DevString[1];
	attr_ExternalSweep_read = new Tango::DevBoolean[1];
	attr_UsedScrapers_read = new Tango::DevBoolean[16];
	/*----- PROTECTED REGION ID(MBFCleaning::init_device) ENABLED START -----*/
	
  // If '/' is missing at the end of config path, add it !
  if (configFilePath[configFilePath.length() - 1] != '/') {
    configFilePath += "/";
  }
  cout << "configFilePath is:" << configFilePath << endl;

  // Print out scraper device
  if(scraperNames.size()==0) {
    cerr << "ERROR: ScraperNames property not defined " << endl;
    exit(0);
  }

  if(usedScrapers.size() != scraperNames.size()) {
    cerr << "ERROR: ScraperNames and UsedScrapers properties must have same length " << endl;
    exit(0);

  }

  nbScrapers = (int)scraperNames.size();

  // Connect to the MBF device
  try {
    mbfDS = new Tango::DeviceProxy(mBFDevice);
  } catch (Tango::DevFailed &e) {
    cerr << "ERROR: cannot import MBF device " << e.errors[0].desc << endl;
    exit(0);
  }

  // Connect to external shaker
  if( externalShakerDevice.length()>0 ) {
    try {
      shakerDS = new Tango::DeviceProxy(externalShakerDevice);
    } catch (Tango::DevFailed &e) {
      cerr << "ERROR: cannot import shaker device " << e.errors[0].desc << endl;
      exit(0);
    }
  }


	// Connect to scrapers
  for(int i=0;i<nbScrapers;i++) {
    try {
      Tango::DeviceProxy *ds = new Tango::DeviceProxy(scraperNames[i]);
      scraperDs.push_back(ds);
    } catch (Tango::DevFailed &e) {
      cerr << "ERROR: cannot import " << scraperNames[i] << " scraper device " << e.errors[0].desc << endl;
      exit(0);
    }
  }

	// Initialise default value
  attr_FreqMin_read[0] = 0.0;
  attr_FreqMax_read[0] = 0.0;
  attr_SweepTime_read[0] = 0.0;
  attr_Gain_read[0] = 0;
  configFile = "No file loaded";
  memset(attr_UsedScrapers_read,0,16*sizeof(Tango::DevBoolean));

  // Default scraper setpoint and initvalue
  for(int i=0;i<nbScrapers;i++) {
    scrSetPoints.push_back(0.0);
    double iPos;
    get_scr_open_pos(scraperNames[i],&iPos);
    scrInitPos.push_back(iPos);
  }
	configurationLoadFailed = false;
  attr_ExternalSweep_read[0] = false;

  set_state(Tango::OFF);
  set_status("Device ready");

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::init_device
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void MBFCleaning::get_device_property()
{
	/*----- PROTECTED REGION ID(MBFCleaning::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
  scraperNames.clear();
  usedScrapers.clear();

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("MBFDevice"));
	dev_prop.push_back(Tango::DbDatum("ExternalShakerDevice"));
	dev_prop.push_back(Tango::DbDatum("ConfigFilePath"));
	dev_prop.push_back(Tango::DbDatum("ScraperNames"));
	dev_prop.push_back(Tango::DbDatum("UsedScrapers"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on MBFCleaningClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		MBFCleaningClass	*ds_class =
			(static_cast<MBFCleaningClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize MBFDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mBFDevice;
		else {
			//	Try to initialize MBFDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mBFDevice;
		}
		//	And try to extract MBFDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mBFDevice;

		//	Try to initialize ExternalShakerDevice from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  externalShakerDevice;
		else {
			//	Try to initialize ExternalShakerDevice from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  externalShakerDevice;
		}
		//	And try to extract ExternalShakerDevice value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  externalShakerDevice;

		//	Try to initialize ConfigFilePath from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  configFilePath;
		else {
			//	Try to initialize ConfigFilePath from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  configFilePath;
		}
		//	And try to extract ConfigFilePath value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configFilePath;

		//	Try to initialize ScraperNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  scraperNames;
		else {
			//	Try to initialize ScraperNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  scraperNames;
		}
		//	And try to extract ScraperNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  scraperNames;

		//	Try to initialize UsedScrapers from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  usedScrapers;
		else {
			//	Try to initialize UsedScrapers from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  usedScrapers;
		}
		//	And try to extract UsedScrapers value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  usedScrapers;

	}

	/*----- PROTECTED REGION ID(MBFCleaning::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void MBFCleaning::always_executed_hook()
{
	DEBUG_STREAM << "MBFCleaning::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void MBFCleaning::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "MBFCleaning::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void MBFCleaning::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "MBFCleaning::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute FreqMin related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_FreqMin(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_FreqMin(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_FreqMin) ENABLED START -----*/

	attr.set_value(attr_FreqMin_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_FreqMin
}
//--------------------------------------------------------
/**
 *	Write attribute FreqMin related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::write_FreqMin(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::write_FreqMin(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFCleaning::write_FreqMin) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Parameter change not allowed while moving.");
  attr_FreqMin_read[0] = w_val;

  /*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_FreqMin
}
//--------------------------------------------------------
/**
 *	Read attribute FreqMax related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_FreqMax(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_FreqMax(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_FreqMax) ENABLED START -----*/

	attr.set_value(attr_FreqMax_read);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_FreqMax
}
//--------------------------------------------------------
/**
 *	Write attribute FreqMax related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::write_FreqMax(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::write_FreqMax(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFCleaning::write_FreqMax) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Parameter change not allowed while moving.");
  attr_FreqMax_read[0] = w_val;

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_FreqMax
}
//--------------------------------------------------------
/**
 *	Read attribute SweepTime related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_SweepTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_SweepTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_SweepTime) ENABLED START -----*/

	attr.set_value(attr_SweepTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_SweepTime
}
//--------------------------------------------------------
/**
 *	Write attribute SweepTime related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::write_SweepTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::write_SweepTime(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFCleaning::write_SweepTime) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Parameter change not allowed while moving.");
  attr_SweepTime_read[0] = w_val;

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_SweepTime
}
//--------------------------------------------------------
/**
 *	Read attribute Gain related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_Gain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_Gain(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_Gain) ENABLED START -----*/

	attr.set_value(attr_Gain_read);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_Gain
}
//--------------------------------------------------------
/**
 *	Write attribute Gain related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::write_Gain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::write_Gain(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFCleaning::write_Gain) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Parameter change not allowed while moving.");
  attr_Gain_read[0] = w_val;

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_Gain
}
//--------------------------------------------------------
/**
 *	Read attribute ConfigFileName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_ConfigFileName(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_ConfigFileName(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_ConfigFileName) ENABLED START -----*/


  attr_ConfigFileName_read[0] = (char *)configFile.c_str();
  if( configurationLoadFailed ) {
    attr.set_quality(Tango::ATTR_ALARM);
  } else {
    attr.set_quality(Tango::ATTR_VALID);
  }
	attr.set_value(attr_ConfigFileName_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_ConfigFileName
}
//--------------------------------------------------------
/**
 *	Read attribute ExternalSweep related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::read_ExternalSweep(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_ExternalSweep(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_ExternalSweep) ENABLED START -----*/

	attr.set_value(attr_ExternalSweep_read);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_ExternalSweep
}
//--------------------------------------------------------
/**
 *	Write attribute ExternalSweep related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MBFCleaning::write_ExternalSweep(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::write_ExternalSweep(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MBFCleaning::write_ExternalSweep) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Parameter change not allowed while moving.");
  attr_ExternalSweep_read[0] = w_val;

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::write_ExternalSweep
}
//--------------------------------------------------------
/**
 *	Read attribute UsedScrapers related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Spectrum max = 16
 */
//--------------------------------------------------------
void MBFCleaning::read_UsedScrapers(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MBFCleaning::read_UsedScrapers(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::read_UsedScrapers) ENABLED START -----*/

	for(int i=0;i<nbScrapers;i++)
    attr_UsedScrapers_read[i] = usedScrapers[i];
	attr.set_value(attr_UsedScrapers_read, nbScrapers);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::read_UsedScrapers
}

//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void MBFCleaning::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(MBFCleaning::add_dynamic_attributes) ENABLED START -----*/

	// Create scraper attributes
	for(int i=0;i<nbScrapers;i++) {
	  string attName =  "Scraper_" + get_last_field(scraperNames[i]);
    scrAttNames.push_back(attName);
	  ScraperAttribute *att = new ScraperAttribute(attName.c_str(),i);
	  add_attribute(att);
	}

  // Save List to DB
  Tango::DbData db_data;
  Tango::DbDatum data("ScraperAttList");
  data << scrAttNames;
  db_data.push_back(data);
  get_db_device()->put_property(db_data);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command StartCleaning related method
 *	Description: Starts the cleaning (Move scrapper down)
 *
 */
//--------------------------------------------------------
void MBFCleaning::start_cleaning()
{
	DEBUG_STREAM << "MBFCleaning::StartCleaning()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::start_cleaning) ENABLED START -----*/

  if( get_state()==Tango::MOVING )
    RAISE_EXCEPTION("Start cleaning not allowed while moving.");

  set_state(Tango::MOVING);
  set_status("Moving scrapers");
  ScraperDownThread *t = new ScraperDownThread(this, mutexsweep);


	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::start_cleaning
}
//--------------------------------------------------------
/**
 *	Command LoadConfigurationFile related method
 *	Description: Loads a configuration file
 *
 *	@param argin Configuration file name (without the path)
 */
//--------------------------------------------------------
void MBFCleaning::load_configuration_file(Tango::DevString argin)
{
	DEBUG_STREAM << "MBFCleaning::LoadConfigurationFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::load_configuration_file) ENABLED START -----*/

	if( get_state()==Tango::MOVING )
		RAISE_EXCEPTION("Cannot read config file while moving.");


	char absolute_name[512];
	strcpy(absolute_name, configFilePath.c_str());
	strcat(absolute_name, argin);
	ifstream conf(absolute_name, ios::in);
	if (conf.is_open()) {

		char buffer[512];
		int line_number = 0;
		int end = 0;

		// Check header
		strcpy(buffer,"");
		conf.getline(buffer, 512);
		if( strcmp(buffer,"## Multibunch cleaning  CONFIG  FILE ##")!=0 ) {
			conf.close();
			configurationLoadFailed = true;
			RAISE_EXCEPTION("Not a cleaning config file");
		}

		while(!end) {

			// Read a line from file.
			stringstream ss;
			conf.getline(buffer, 512);
			line_number++;
			string rd = string(buffer);
			string att_name;

			if( rd.length()==0 ) {
				// End of file readched
				end = 1;
				continue;
			}

			// Jump comments
			if( rd[0]=='#' )
				continue;

			ss << rd;
			ss >> att_name;

			if(att_name=="FreqMin") {
				ss >> attr_FreqMin_read[0];
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("FreqMin");
				att.set_write_value(attr_FreqMin_read[0]);
				save_attribute_property("FreqMin","__value",attr_FreqMin_read[0]);
			} else if (att_name=="FreqMax") {
				ss >> attr_FreqMax_read[0];
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("FreqMax");
				att.set_write_value(attr_FreqMax_read[0]);
				save_attribute_property("FreqMax","__value",attr_FreqMax_read[0]);
			} else if (att_name=="SweepTime") {
				ss >> attr_SweepTime_read[0];
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("SweepTime");
				att.set_write_value(attr_SweepTime_read[0]);
				save_attribute_property("SweepTime","__value",attr_SweepTime_read[0]);
			} else if (att_name=="Gain") {
				ss >> attr_Gain_read[0];
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("Gain");
				att.set_write_value(attr_Gain_read[0]);
				save_attribute_property("Gain","__value",attr_Gain_read[0]);
			} else if (att_name=="UsedScrapers") {

			  string value;
			  ss >> value;
			  vector<string> values;
			  split(values,value,',');
			  if((int)values.size()!=nbScrapers) {
          configurationLoadFailed = true;
          RAISE_EXCEPTION("Invalid UsedScrapers length, must have same number of items as number of scrapers");
        }
			  usedScrapers.clear();
			  for(int i=0;i<nbScrapers;i++) {
			    short u = (short)atoi(values[i].c_str());
			    usedScrapers.push_back(u);
			  }
			} else if (att_name=="ExternalSweep") {
				ss >> attr_ExternalSweep_read[0];
				Tango::WAttribute &att = dev_attr->get_w_attr_by_name("ExternalSweep");
				att.set_write_value(attr_ExternalSweep_read[0]);
				save_attribute_property("ExternalSweep","__value",attr_ExternalSweep_read[0]);
			}  else  {

        int scrIdx = get_scr_idx(att_name);
        if(scrIdx<0) {

          cout << "Warning, ignoring " << att_name << " : Attribute not found" << endl;

        } else {

          try {

            Tango::WAttribute &att = dev_attr->get_w_attr_by_name(att_name.c_str());
            double value;
            ss >> value;
            att.set_write_value(value);
            scrSetPoints[scrIdx]=value;
            save_attribute_property(att_name, "__value", value);

          } catch (Tango::DevFailed &e) {
            cout << "Warning, ignoring " << att_name << " : " << e.errors[0].desc << endl;
          }

        }

			}

		}

		conf.close();
		configFile = string(argin);
		configurationLoadFailed = false;

	} else {
		// Unable to open file.
		char tmp[1024];
		sprintf(tmp,"Unable to open file for reading %s",absolute_name);
		configurationLoadFailed = true;
		RAISE_EXCEPTION(tmp);
	}
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::load_configuration_file
}
//--------------------------------------------------------
/**
 *	Command SaveConfigurationFile related method
 *	Description: 
 *
 *	@param argin Configuration file name (without the path)
 */
//--------------------------------------------------------
void MBFCleaning::save_configuration_file(Tango::DevString argin)
{
	DEBUG_STREAM << "MBFCleaning::SaveConfigurationFile()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::save_configuration_file) ENABLED START -----*/

	if(attr_FreqMin_read[0]>=attr_FreqMax_read[0]) {
		RAISE_EXCEPTION("FreqMin must be lower than FreqMax");
	}

	char absolute_name[512];
	strcpy(absolute_name, configFilePath.c_str());
	strcat(absolute_name, argin);
	ofstream conf(absolute_name, ios::out);

	if (conf.is_open())
	{

		conf << "## Multibunch cleaning  CONFIG  FILE ##" << endl;
		conf << "FreqMin\t"         <<  attr_FreqMin_read[0] << endl;
		conf << "FreqMax\t"         <<  attr_FreqMax_read[0] << endl;
		conf << "SweepTime\t"       <<  attr_SweepTime_read[0] << endl;
		conf << "Gain\t"            <<  attr_Gain_read[0] << endl;
		conf << "ExternalSweep\t" <<  attr_ExternalSweep_read[0] << endl;
		conf << "UsedScrapers\t";
		for(int i=0;i<nbScrapers;i++) {
		  conf << usedScrapers[i];
		  if(i<(int)scraperNames.size()-1)
		    conf << ",";
		}
		conf << endl;

		for(int i=0;i<nbScrapers;i++) {
      if(usedScrapers[i]) {
        conf << scrAttNames[i] << "\t" << scrSetPoints[i] << endl;
      }
    }

		conf.close();
		configFile = string(argin);
	}
	else
	{
		// Unable to create file.
		char tmp[1024];
		sprintf(tmp,"Unable to open file for writing %s",absolute_name);
		RAISE_EXCEPTION(tmp);
	}

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::save_configuration_file
}
//--------------------------------------------------------
/**
 *	Command GetConfigurationFilePath related method
 *	Description: Returns the absolute confiration file path
 *
 *	@returns Configuration file path
 */
//--------------------------------------------------------
Tango::DevString MBFCleaning::get_configuration_file_path()
{
	Tango::DevString argout;
	DEBUG_STREAM << "MBFCleaning::GetConfigurationFilePath()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::get_configuration_file_path) ENABLED START -----*/

	argout  = new char[configFilePath.length()+1];
	strcpy(argout, configFilePath.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::get_configuration_file_path
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Sweep related method
 *	Description: Start sweep (Sweep from freqmin to freqmax)
 *
 */
//--------------------------------------------------------
void MBFCleaning::sweep()
{
	DEBUG_STREAM << "MBFCleaning::Sweep()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::sweep) ENABLED START -----*/

	if( get_state()==Tango::MOVING )
		RAISE_EXCEPTION("Cannot sweep while moving.");

	if(attr_FreqMin_read[0]>=attr_FreqMax_read[0]) {
		RAISE_EXCEPTION("FreqMin must be lower than FreqMax");
	}

	if(attr_SweepTime_read[0]<=0.0) {
		RAISE_EXCEPTION("SweepTime must be srictly positive");
	}

	set_state(Tango::MOVING);
	set_status("Starting sweep");
	SweepThread *t = new SweepThread(this, mutexsweep);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::sweep
}
//--------------------------------------------------------
/**
 *	Command EndCleaning related method
 *	Description: End the cleaning (restore scraper positions)
 *
 */
//--------------------------------------------------------
void MBFCleaning::end_cleaning()
{
	DEBUG_STREAM << "MBFCleaning::EndCleaning()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::end_cleaning) ENABLED START -----*/

	if( get_state()==Tango::MOVING )
		RAISE_EXCEPTION("Cannot stop cleaning while moving.");

	set_state(Tango::MOVING);
	set_status("Moving scrapers");
	ScraperUpThread *t = new ScraperUpThread(this, mutexsweep);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::end_cleaning
}
//--------------------------------------------------------
/**
 *	Command DoAll related method
 *	Description: Perform cleaning task (move scraper and sweep)
 *
 */
//--------------------------------------------------------
void MBFCleaning::do_all()
{
	DEBUG_STREAM << "MBFCleaning::DoAll()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::do_all) ENABLED START -----*/

	if( get_state()==Tango::MOVING )
		RAISE_EXCEPTION("Cannot clean while moving.");

	if(attr_FreqMin_read[0]>=attr_FreqMax_read[0]) {
		RAISE_EXCEPTION("FreqMin must be lower than FreqMax");
	}

	if(attr_SweepTime_read[0]<=0.0) {
		RAISE_EXCEPTION("SweepTime must be srictly positive");
	}

	set_state(Tango::MOVING);
	set_status("Moving scrapers");
	DoAllThread *t = new DoAllThread(this, mutexsweep);
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::do_all
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: Stops the cleaning
 *
 */
//--------------------------------------------------------
void MBFCleaning::stop()
{
	DEBUG_STREAM << "MBFCleaning::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::stop) ENABLED START -----*/

	// Abort scraper motion
	for(int i=0;i<nbScrapers;i++) {
	  if(usedScrapers[i])
	    scraperDs[i]->command_inout("Abort");
	}

	// Abort cleaning
	mbfDS->command_inout("Reset");

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::stop
}
//--------------------------------------------------------
/**
 *	Command SelectScraper related method
 *	Description: 
 *
 *	@param argin [0] = Scraper index
 *               [1] = Scraper enable=1 / disable=0
 */
//--------------------------------------------------------
void MBFCleaning::select_scraper(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "MBFCleaning::SelectScraper()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(MBFCleaning::select_scraper) ENABLED START -----*/

	if(argin->length()!=2) {
	  RAISE_EXCEPTION("Invalid argin length, 2 expected (scraper index,scraper enable)");
	}

	int idx = (*argin)[0];
	if(idx<0 || idx>=nbScrapers) {
    RAISE_EXCEPTION("Scraper index out of range");
	}

	usedScrapers[idx] = (*argin)[1];

	// Save to DB
  Tango::DbData db_data;
  Tango::DbDatum data("UsedScrapers");
  data << usedScrapers;
  db_data.push_back(data);
  get_db_device()->put_property(db_data);

	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::select_scraper
}
//--------------------------------------------------------
/**
 *	Method      : MBFCleaning::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void MBFCleaning::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(MBFCleaning::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	MBFCleaning::add_dynamic_commands
}

/*----- PROTECTED REGION ID(MBFCleaning::namespace_ending) ENABLED START -----*/

//	Additional Methods

int MBFCleaning::get_scr_idx(string attName) {
  bool found = false;
  int i = 0;
  while(!found && i<nbScrapers) {
    found = strcasecmp(attName.c_str(),scrAttNames[i].c_str())==0;
    if(!found) i++;
  }
  if(found)
    return i;
  else
    return -1;
}

void MBFCleaning::get_scr_open_pos(string scraperName,double *pos) {

  Tango::Database *db =Tango::Util::instance()->get_database();
	Tango::DbData dbData;
	Tango::DbDatum dbDatum("OpenPos");
	dbData.push_back(dbDatum);
	db->get_device_property(scraperName,dbData);
  if( dbData[0].is_empty() )
    RAISE_EXCEPTION("OpenPos not specified for scraper "+scraperName);
  dbData[0] >> *pos;

}

void MBFCleaning::save_attribute_property(string attName,string propName,double value) {

	Tango::DbDatum dbAtt(attName);
	Tango::DbDatum dbProp(propName);
	Tango::DbData dbData;

	dbAtt << 1; // One property
	dbProp << value;
	dbData.push_back(dbAtt);
	dbData.push_back(dbProp);
	get_db_device()->put_attribute_property(dbData);

}

void MBFCleaning::read_scraper_attribute(Tango::Attribute &attr,ScraperAttribute *src) {

  	attr.set_value(&scrSetPoints[src->scrIdx]);

}

void MBFCleaning::write_scraper_attribute(Tango::WAttribute &attr,ScraperAttribute *src) {

 	Tango::DevDouble	w_val;
 	attr.get_write_value(w_val);
  if( get_state()==Tango::MOVING )
     RAISE_EXCEPTION("Parameter change not allowed while moving.");
  scrSetPoints[src->scrIdx] = w_val;

}

string MBFCleaning::get_last_field(string name) {

  char *p = strrchr((char *)name.c_str(),'/');
  if(p) {
    p++;
    return string(p);
  } else {
    return name;
  }

}

void MBFCleaning::split(vector<string> &tokens, const string &text, char sep) {

  size_t start = 0, end = 0;
  tokens.clear();

  while ((end = text.find(sep, start)) != string::npos) {
    tokens.push_back(text.substr(start, end - start));
    start = end + 1;
  }

  tokens.push_back(text.substr(start));

}

// //--------------------------------------------------------
// //--------------------------------------------------------
// void MBFCleaning::read_Upp22(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "MBFCleaning::read_Upp22(Tango::Attribute &attr) entering... " << endl;
// 	attr.set_value(attr_Upp22_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute Upp22 related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevDouble
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void MBFCleaning::write_Upp22(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "MBFCleaning::write_Upp22(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevDouble	w_val;
// 	attr.get_write_value(w_val);
//   if( get_state()==Tango::MOVING )
//     RAISE_EXCEPTION("Parameter change not allowed while moving.");
//   attr_Upp22_read[0] = w_val;
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Scrapers related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void MBFCleaning::read_Scrapers(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "MBFCleaning::read_Scrapers(Tango::Attribute &attr) entering... " << endl;
// 	attr.set_value(attr_Scrapers_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Write attribute Scrapers related method
//  *	Description: 
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void MBFCleaning::write_Scrapers(Tango::WAttribute &attr)
// {
// 	DEBUG_STREAM << "MBFCleaning::write_Scrapers(Tango::WAttribute &attr) entering... " << endl;
// 	//	Retrieve write value
// 	Tango::DevShort	w_val;
// 	attr.get_write_value(w_val);
//   if( get_state()==Tango::MOVING )
//     RAISE_EXCEPTION("Parameter change not allowed while moving.");
//   attr_Scrapers_read[0] = w_val;
// }


/*----- PROTECTED REGION END -----*/	//	MBFCleaning::namespace_ending
} //	namespace
